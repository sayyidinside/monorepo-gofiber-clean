// Code generated by mockery v2.53.5. DO NOT EDIT.

package mocks

import (
	context "context"

	entity "github.com/sayyidinside/monorepo-gofiber-clean/shared/domain/entity"
	mock "github.com/stretchr/testify/mock"

	model "github.com/sayyidinside/monorepo-gofiber-clean/shared/interfaces/model"

	uuid "github.com/google/uuid"
)

// ModuleRepository is an autogenerated mock type for the ModuleRepository type
type ModuleRepository struct {
	mock.Mock
}

// Count provides a mock function with given fields: ctx, query
func (_m *ModuleRepository) Count(ctx context.Context, query *model.QueryGet) int64 {
	ret := _m.Called(ctx, query)

	if len(ret) == 0 {
		panic("no return value specified for Count")
	}

	var r0 int64
	if rf, ok := ret.Get(0).(func(context.Context, *model.QueryGet) int64); ok {
		r0 = rf(ctx, query)
	} else {
		r0 = ret.Get(0).(int64)
	}

	return r0
}

// CountUnscoped provides a mock function with given fields: ctx, query
func (_m *ModuleRepository) CountUnscoped(ctx context.Context, query *model.QueryGet) int64 {
	ret := _m.Called(ctx, query)

	if len(ret) == 0 {
		panic("no return value specified for CountUnscoped")
	}

	var r0 int64
	if rf, ok := ret.Get(0).(func(context.Context, *model.QueryGet) int64); ok {
		r0 = rf(ctx, query)
	} else {
		r0 = ret.Get(0).(int64)
	}

	return r0
}

// Delete provides a mock function with given fields: ctx, module
func (_m *ModuleRepository) Delete(ctx context.Context, module *entity.Module) error {
	ret := _m.Called(ctx, module)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *entity.Module) error); ok {
		r0 = rf(ctx, module)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FindAll provides a mock function with given fields: ctx, query
func (_m *ModuleRepository) FindAll(ctx context.Context, query *model.QueryGet) (*[]entity.Module, error) {
	ret := _m.Called(ctx, query)

	if len(ret) == 0 {
		panic("no return value specified for FindAll")
	}

	var r0 *[]entity.Module
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *model.QueryGet) (*[]entity.Module, error)); ok {
		return rf(ctx, query)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *model.QueryGet) *[]entity.Module); ok {
		r0 = rf(ctx, query)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*[]entity.Module)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *model.QueryGet) error); ok {
		r1 = rf(ctx, query)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindByID provides a mock function with given fields: ctx, id
func (_m *ModuleRepository) FindByID(ctx context.Context, id uint) (*entity.Module, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for FindByID")
	}

	var r0 *entity.Module
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uint) (*entity.Module, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uint) *entity.Module); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.Module)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uint) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindByIDUnscoped provides a mock function with given fields: ctx, id
func (_m *ModuleRepository) FindByIDUnscoped(ctx context.Context, id uint) (*entity.Module, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for FindByIDUnscoped")
	}

	var r0 *entity.Module
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uint) (*entity.Module, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uint) *entity.Module); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.Module)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uint) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindByUUID provides a mock function with given fields: ctx, _a1
func (_m *ModuleRepository) FindByUUID(ctx context.Context, _a1 uuid.UUID) (*entity.Module, error) {
	ret := _m.Called(ctx, _a1)

	if len(ret) == 0 {
		panic("no return value specified for FindByUUID")
	}

	var r0 *entity.Module
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) (*entity.Module, error)); ok {
		return rf(ctx, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) *entity.Module); ok {
		r0 = rf(ctx, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.Module)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Insert provides a mock function with given fields: ctx, module
func (_m *ModuleRepository) Insert(ctx context.Context, module *entity.Module) error {
	ret := _m.Called(ctx, module)

	if len(ret) == 0 {
		panic("no return value specified for Insert")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *entity.Module) error); ok {
		r0 = rf(ctx, module)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NameExist provides a mock function with given fields: ctx, module
func (_m *ModuleRepository) NameExist(ctx context.Context, module *entity.Module) bool {
	ret := _m.Called(ctx, module)

	if len(ret) == 0 {
		panic("no return value specified for NameExist")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func(context.Context, *entity.Module) bool); ok {
		r0 = rf(ctx, module)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// Update provides a mock function with given fields: ctx, module
func (_m *ModuleRepository) Update(ctx context.Context, module *entity.Module) error {
	ret := _m.Called(ctx, module)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *entity.Module) error); ok {
		r0 = rf(ctx, module)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewModuleRepository creates a new instance of ModuleRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewModuleRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *ModuleRepository {
	mock := &ModuleRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
